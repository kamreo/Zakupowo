@model ShopApp.ViewModels.CashOutViewModel

@Styles.Render("~/bundles/Order")

<div class="row cash-header text-center mx-auto">
    <div class="col-12">
        <h1 class="my-lg-4 my-2 mt-4">Zamówienie</h1>
        <hr>
    </div>
</div>

<div class="cash mx-auto mt-lg-4">
    <form method="post">
        <div class="row cash-address shadow m-0 mt-2 p-3">
            <div class="col-12 text-center">
                <h5>Dane odbiorcy</h5>
            </div>
            <div class="col-12 col-lg-7 m-2 mx-auto">
                <select id="address-input" name="address-input" class="form-control">
                    @{List<ShopApp.Models.ShippingAdress> lista = Model.ShippingAdresses.ToList();}
                    @for (int x = 0; x < Model.ShippingAdresses.Count(); x++)
                    {
                        <option value="@lista[x].AdressID">adres @(x+1)</option>
                    }
                </select>
            </div>
            @foreach (var Adress in Model.ShippingAdresses)
            {
                <div class="col-12 col-lg-7 m-2 mx-auto address" id="Address_@Adress.AdressID">
                    <input type="hidden" value="@Adress.AdressID" />
                    <p>@Adress.User.FirstName @Adress.User.LastName</p>
                    <p>@Adress.Street</p>
                    <p>@Adress.PostalCode @Adress.City</p>
                    <p>@Adress.User.Phone</p>
                </div>
            }
        </div>
        <div class="cash-offers shadow m-0 mt-2 mt-lg-4 p-3">
            @try
            {
                foreach (var seller in Model.GroupedBucketItems)
                {
                    <div class="items-group mt-1">
                        <div class="row items-header">
                            <div class="col-12 items-seller">
                                <p class="pl-4">od: <a href="@Url.Action("UserInformation","User",new { UserId = seller.Key.UserID })" class="seller-name">@seller.Key.Login</a></p>
                            </div>
                        </div>
                        @foreach (var item in seller)
                        {
                            if (item.Offer != null)
                            {
                                <div class="row item justify-content-center align-items-center text-center">
                                    <div class="col-6 col-lg-4 item-image">
                                        <img class="img-fluid" src="@item.Offer.OfferPictures.First().PathToFile">
                                    </div>
                                    <div class="col-6 col-lg-4 item-desc">
                                        <p><a class="product-name" href="@Url.Action("Index", "Offer", new { OfferID = item.Offer.OfferID })">@item.Offer.Title</a></p>
                                        <p class="product-price">@item.Quantity x @item.Offer.Price zł</p>
                                        <p class="product-totalprice">@(item.Quantity * item.Offer.Price) zł</p>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="row item justify-content-center align-items-center text-center">
                                    <div class="col-6 col-lg-4 item-image">
                                        <img class="img-fluid" src="@item.Bundle.BundlePicture.PathToFile">
                                    </div>
                                    <div class="col-6 col-lg-4 item-desc">
                                        <p><a class="product-name" href="@Url.Action("Bundle","Offer",new { BundleId = item.Bundle.BundleID })">@item.Bundle.Title</a></p>
                                        <p class="product-totalprice">@item.Bundle.BundlePrice zł</p>
                                    </div>
                                </div>
                            }

                        }
                        <div class="row items-footer text-center">
                            <div class="col-12 mt-4">
                                Razem do zapłaty:<p class="p-0 items-sum">Razem: /*JS*/</p>
                            </div>
                        </div>
                        <div class="row cash-message m-0 mt-4">
                            <div class="col-12 mb-1 text-center"><h5>Wiadomość dla sprzedającego</h5></div>
                            <div class="col-12 mx-lg-auto col-lg-6">
                                <textarea class="form-control" id="message-input-" name="message-input-@seller.Key.UserID" rows="5"></textarea>
                            </div>
                        </div>
                    </div>
                    <hr />
                }
            }
            catch(Exception e)
            {
                Response.StatusCode = 500;
            }


        </div>
        <div class="row cash-summary shadow m-0 mt-2 mt-lg-4 mb-2 mb-lg-4 p-3 text-center">
            <div class="col-12"><h5>Podsumowanie zamówienia</h5></div>
            <div class="col-12">
                <p class="cash-sum-text pb-0 mb-0">Razem do zapłaty: </p>
                <p class="cash-sum">/*JS*/ zł</p>
            </div>
            <div class="col-12">
                <button type="submit" class="btn btn-primary cashout-btn p-3">KUPUJĘ</button>
            </div>
        </div>
    </form>
</div>
@Scripts.Render("~/bundles/Orderjs")